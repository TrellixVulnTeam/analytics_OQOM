import { observeOn } from 'rxjs/operators';
import { Observable, queueScheduler, observable, } from 'rxjs';
export function fromPromise(promiseFn) {
    return new Observable((subscriber) => {
        promiseFn().then((result) => {
            if (!subscriber.closed) {
                subscriber.next(result);
                subscriber.complete();
            }
        }, (error) => {
            if (!subscriber.closed) {
                subscriber.error(error);
            }
        });
        return () => subscriber.unsubscribe();
    });
}
export class ZoneScheduler {
    constructor(zone) {
        this.zone = zone;
        this.now = Date.now ? Date.now : () => +new Date();
    }
    schedule(work, delay = 0, state) {
        return this.zone.run(() => queueScheduler.schedule(work, delay, state));
    }
}
export function fixObservable(obs) {
    obs[observable] = () => obs;
    return obs;
}
export function wrapWithZone(obs, ngZone) {
    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));
}
export function pickFlag(flags, flag, defaultValue) {
    return flags && typeof flags[flag] !== 'undefined'
        ? flags[flag]
        : defaultValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL3Jvb3Qvd29ya3NwYWNlL2Fwb2xsby1hbmd1bGFyL3BhY2thZ2VzL2Fwb2xsby1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQU16QyxPQUFPLEVBQ0wsVUFBVSxFQUVWLGNBQWMsRUFHZCxVQUFVLEdBQ1gsTUFBTSxNQUFNLENBQUM7QUFFZCxNQUFNLFVBQVUsV0FBVyxDQUFJLFNBQTJCO0lBQ3hELE9BQU8sSUFBSSxVQUFVLENBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUN0QyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQ2QsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNULElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUN0QixVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN4QixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdkI7UUFDSCxDQUFDLEVBQ0QsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUN0QixVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUNGLENBQUM7UUFFRixPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUFvQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtRQUV6QixRQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRmxCLENBQUM7SUFJN0IsUUFBUSxDQUNiLElBQW1ELEVBQ25ELFFBQWdCLENBQUMsRUFDakIsS0FBUztRQUVULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQ3hCLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FDNUIsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUFTRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixHQUF3QztJQUV2QyxHQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3JDLE9BQU8sR0FBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUMxQixHQUFrQixFQUNsQixNQUFjO0lBRWQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQ3RCLEtBQXlCLEVBQ3pCLElBQU8sRUFDUCxZQUF1QjtJQUV2QixPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxXQUFXO1FBQ2hELENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtvYnNlcnZlT259IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIE9ic2VydmFibGVRdWVyeSxcbiAgQXBvbGxvUXVlcnlSZXN1bHQsXG4gIE9ic2VydmFibGUgYXMgQU9ic2VydmFibGUsXG59IGZyb20gJ0BhcG9sbG8vY2xpZW50L2NvcmUnO1xuaW1wb3J0IHtcbiAgT2JzZXJ2YWJsZSxcbiAgU3Vic2NyaXB0aW9uLFxuICBxdWV1ZVNjaGVkdWxlcixcbiAgU2NoZWR1bGVyTGlrZSxcbiAgU2NoZWR1bGVyQWN0aW9uLFxuICBvYnNlcnZhYmxlLFxufSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlPFQ+KHByb21pc2VGbjogKCkgPT4gUHJvbWlzZTxUPik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGU8VD4oKHN1YnNjcmliZXIpID0+IHtcbiAgICBwcm9taXNlRm4oKS50aGVuKFxuICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuXG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBab25lU2NoZWR1bGVyIGltcGxlbWVudHMgU2NoZWR1bGVyTGlrZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgem9uZTogTmdab25lKSB7fVxuXG4gIHB1YmxpYyBub3cgPSBEYXRlLm5vdyA/IERhdGUubm93IDogKCkgPT4gK25ldyBEYXRlKCk7XG5cbiAgcHVibGljIHNjaGVkdWxlPFQ+KFxuICAgIHdvcms6ICh0aGlzOiBTY2hlZHVsZXJBY3Rpb248VD4sIHN0YXRlPzogVCkgPT4gdm9pZCxcbiAgICBkZWxheTogbnVtYmVyID0gMCxcbiAgICBzdGF0ZT86IFQsXG4gICk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuem9uZS5ydW4oKCkgPT5cbiAgICAgIHF1ZXVlU2NoZWR1bGVyLnNjaGVkdWxlKHdvcmssIGRlbGF5LCBzdGF0ZSksXG4gICAgKSBhcyBTdWJzY3JpcHRpb247XG4gIH1cbn1cblxuLy8gWFhYOiBBcG9sbG8ncyBRdWVyeU9ic2VydmFibGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBSeEpTXG4vLyBUT0RPOiByZW1vdmUgaXQgaW4gb25lIG9mIGZ1dHVyZSByZWxlYXNlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2Jsb2IvOWZiMGNlOWUwOWM4NjU5MjBjZjM3OTE1Y2M2NzVlM2IzYTc1MDUwYi9zcmMvaW50ZXJuYWwvdXRpbC9zdWJzY3JpYmVUby50cyNMMzJcbmV4cG9ydCBmdW5jdGlvbiBmaXhPYnNlcnZhYmxlPFQ+KFxuICBvYnM6IE9ic2VydmFibGVRdWVyeTxUPixcbik6IE9ic2VydmFibGU8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+O1xuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGU8VD4ob2JzOiBBT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8VD47XG5leHBvcnQgZnVuY3Rpb24gZml4T2JzZXJ2YWJsZTxUPihcbiAgb2JzOiBBT2JzZXJ2YWJsZTxUPiB8IE9ic2VydmFibGVRdWVyeTxUPixcbik6IE9ic2VydmFibGU8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+IHwgT2JzZXJ2YWJsZTxUPiB7XG4gIChvYnMgYXMgYW55KVtvYnNlcnZhYmxlXSA9ICgpID0+IG9icztcbiAgcmV0dXJuIG9icyBhcyBhbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwV2l0aFpvbmU8VD4oXG4gIG9iczogT2JzZXJ2YWJsZTxUPixcbiAgbmdab25lOiBOZ1pvbmUsXG4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgcmV0dXJuIG9icy5waXBlKG9ic2VydmVPbihuZXcgWm9uZVNjaGVkdWxlcihuZ1pvbmUpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrRmxhZzxURmxhZ3MsIEsgZXh0ZW5kcyBrZXlvZiBURmxhZ3M+KFxuICBmbGFnczogVEZsYWdzIHwgdW5kZWZpbmVkLFxuICBmbGFnOiBLLFxuICBkZWZhdWx0VmFsdWU6IFRGbGFnc1tLXSxcbik6IFRGbGFnc1tLXSB7XG4gIHJldHVybiBmbGFncyAmJiB0eXBlb2YgZmxhZ3NbZmxhZ10gIT09ICd1bmRlZmluZWQnXG4gICAgPyBmbGFnc1tmbGFnXVxuICAgIDogZGVmYXVsdFZhbHVlO1xufVxuIl19