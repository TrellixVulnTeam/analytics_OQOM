import { ApolloError, } from '@apollo/client/core';
const isApolloError = (err) => err && err.hasOwnProperty('graphQLErrors');
const ɵ0 = isApolloError;
export class TestOperation {
    constructor(operation, observer) {
        this.operation = operation;
        this.observer = observer;
    }
    flush(result) {
        if (isApolloError(result)) {
            this.observer.error(result);
        }
        else {
            const fetchResult = result ? Object.assign({}, result) : result;
            this.observer.next(fetchResult);
            this.observer.complete();
        }
    }
    flushData(data) {
        this.flush({
            data,
        });
    }
    networkError(error) {
        const apolloError = new ApolloError({
            networkError: error,
        });
        this.flush(apolloError);
    }
    graphqlErrors(errors) {
        this.flush({
            errors,
        });
    }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9yb290L3dvcmtzcGFjZS9hcG9sbG8tYW5ndWxhci9wYWNrYWdlcy9hcG9sbG8tYW5ndWxhci90ZXN0aW5nL3NyYy8iLCJzb3VyY2VzIjpbIm9wZXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxHQUdaLE1BQU0scUJBQXFCLENBQUM7QUFJN0IsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQXNCLEVBQUUsQ0FDckQsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBTTdDLE1BQU0sT0FBTyxhQUFhO0lBQ3hCLFlBQ1MsU0FBb0IsRUFDbkIsUUFBa0M7UUFEbkMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUEwQjtJQUN6QyxDQUFDO0lBRUcsS0FBSyxDQUFDLE1BQXFDO1FBQ2hELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO2FBQU07WUFDTCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxtQkFBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUE2QixDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFTSxTQUFTLENBQUMsSUFBaUM7UUFDaEQsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNULElBQUk7U0FDTCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQVk7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUM7WUFDbEMsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sYUFBYSxDQUFDLE1BQXNCO1FBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDVCxNQUFNO1NBQ1AsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBvbGxvRXJyb3IsXG4gIE9wZXJhdGlvbiBhcyBMaW5rT3BlcmF0aW9uLFxuICBGZXRjaFJlc3VsdCxcbn0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7XG5pbXBvcnQge0dyYXBoUUxFcnJvciwgRXhlY3V0aW9uUmVzdWx0fSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7T2JzZXJ2ZXJ9IGZyb20gJ3J4anMnO1xuXG5jb25zdCBpc0Fwb2xsb0Vycm9yID0gKGVycjogYW55KTogZXJyIGlzIEFwb2xsb0Vycm9yID0+XG4gIGVyciAmJiBlcnIuaGFzT3duUHJvcGVydHkoJ2dyYXBoUUxFcnJvcnMnKTtcblxuZXhwb3J0IHR5cGUgT3BlcmF0aW9uID0gTGlua09wZXJhdGlvbiAmIHtcbiAgY2xpZW50TmFtZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIFRlc3RPcGVyYXRpb248VCA9IHtba2V5OiBzdHJpbmddOiBhbnl9PiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBvcGVyYXRpb246IE9wZXJhdGlvbixcbiAgICBwcml2YXRlIG9ic2VydmVyOiBPYnNlcnZlcjxGZXRjaFJlc3VsdDxUPj4sXG4gICkge31cblxuICBwdWJsaWMgZmx1c2gocmVzdWx0OiBFeGVjdXRpb25SZXN1bHQgfCBBcG9sbG9FcnJvcik6IHZvaWQge1xuICAgIGlmIChpc0Fwb2xsb0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXIuZXJyb3IocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmV0Y2hSZXN1bHQgPSByZXN1bHQgPyB7Li4ucmVzdWx0fSA6IHJlc3VsdDtcbiAgICAgIHRoaXMub2JzZXJ2ZXIubmV4dChmZXRjaFJlc3VsdCBhcyBGZXRjaFJlc3VsdDxUPik7XG4gICAgICB0aGlzLm9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGZsdXNoRGF0YShkYXRhOiB7W2tleTogc3RyaW5nXTogYW55fSB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLmZsdXNoKHtcbiAgICAgIGRhdGEsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbmV0d29ya0Vycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xuICAgIGNvbnN0IGFwb2xsb0Vycm9yID0gbmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgIG5ldHdvcmtFcnJvcjogZXJyb3IsXG4gICAgfSk7XG5cbiAgICB0aGlzLmZsdXNoKGFwb2xsb0Vycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBncmFwaHFsRXJyb3JzKGVycm9yczogR3JhcGhRTEVycm9yW10pOiB2b2lkIHtcbiAgICB0aGlzLmZsdXNoKHtcbiAgICAgIGVycm9ycyxcbiAgICB9KTtcbiAgfVxufVxuIl19