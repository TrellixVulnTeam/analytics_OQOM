import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApolloLink, Observable as LinkObservable, } from '@apollo/client/core';
import { print } from 'graphql';
import { extractFiles } from 'extract-files';
import { createHeadersWithClientAwereness, fetch, mergeHeaders, prioritize, } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
// XXX find a better name for it
export class HttpLinkHandler extends ApolloLink {
    constructor(httpClient, options) {
        super();
        this.httpClient = httpClient;
        this.options = options;
        this.requester = (operation) => new LinkObservable((observer) => {
            const context = operation.getContext();
            // decides which value to pick, Context, Options or to just use the default
            const pick = (key, init) => {
                return prioritize(context[key], this.options[key], init);
            };
            const includeQuery = pick('includeQuery', true);
            const includeExtensions = pick('includeExtensions', false);
            const method = pick('method', 'POST');
            const url = pick('uri', 'graphql');
            const withCredentials = pick('withCredentials');
            const useMultipart = pick('useMultipart');
            const req = {
                method,
                url: typeof url === 'function' ? url(operation) : url,
                body: {
                    operationName: operation.operationName,
                    variables: operation.variables,
                },
                options: {
                    withCredentials,
                    useMultipart,
                    headers: this.options.headers,
                },
            };
            if (includeExtensions) {
                req.body.extensions = operation.extensions;
            }
            if (includeQuery) {
                req.body.query = print(operation.query);
            }
            const headers = createHeadersWithClientAwereness(context);
            req.options.headers = mergeHeaders(req.options.headers, headers);
            const sub = fetch(req, this.httpClient, extractFiles).subscribe({
                next: (response) => {
                    operation.setContext({ response });
                    observer.next(response.body);
                },
                error: (err) => observer.error(err),
                complete: () => observer.complete(),
            });
            return () => {
                if (!sub.closed) {
                    sub.unsubscribe();
                }
            };
        });
    }
    request(op) {
        return this.requester(op);
    }
}
export class HttpLink {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    create(options) {
        return new HttpLinkHandler(this.httpClient, options);
    }
}
HttpLink.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpLink_Factory() { return new HttpLink(i0.ɵɵinject(i1.HttpClient)); }, token: HttpLink, providedIn: "root" });
HttpLink.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpLink.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1saW5rLmpzIiwic291cmNlUm9vdCI6Ii9yb290L3dvcmtzcGFjZS9hcG9sbG8tYW5ndWxhci9wYWNrYWdlcy9hcG9sbG8tYW5ndWxhci9odHRwL3NyYy8iLCJzb3VyY2VzIjpbImh0dHAtbGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQ0wsVUFBVSxFQUNWLFVBQVUsSUFBSSxjQUFjLEdBRzdCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFDTCxnQ0FBZ0MsRUFDaEMsS0FBSyxFQUNMLFlBQVksRUFDWixVQUFVLEdBQ1gsTUFBTSxTQUFTLENBQUM7OztBQUVqQixnQ0FBZ0M7QUFDaEMsTUFBTSxPQUFPLGVBQWdCLFNBQVEsVUFBVTtJQUs3QyxZQUFvQixVQUFzQixFQUFVLE9BQWdCO1FBQ2xFLEtBQUssRUFBRSxDQUFDO1FBRFUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFHbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLFNBQW9CLEVBQUUsRUFBRSxDQUN4QyxJQUFJLGNBQWMsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO1lBQ25DLE1BQU0sT0FBTyxHQUFZLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUVoRCwyRUFBMkU7WUFDM0UsTUFBTSxJQUFJLEdBQUcsQ0FDWCxHQUFNLEVBQ04sSUFBOEIsRUFDTCxFQUFFO2dCQUMzQixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJ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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1xuICBBcG9sbG9MaW5rLFxuICBPYnNlcnZhYmxlIGFzIExpbmtPYnNlcnZhYmxlLFxuICBPcGVyYXRpb24sXG4gIEZldGNoUmVzdWx0LFxufSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcbmltcG9ydCB7cHJpbnR9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHtleHRyYWN0RmlsZXN9IGZyb20gJ2V4dHJhY3QtZmlsZXMnO1xuaW1wb3J0IHtPcHRpb25zLCBCb2R5LCBSZXF1ZXN0LCBDb250ZXh0fSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIGNyZWF0ZUhlYWRlcnNXaXRoQ2xpZW50QXdlcmVuZXNzLFxuICBmZXRjaCxcbiAgbWVyZ2VIZWFkZXJzLFxuICBwcmlvcml0aXplLFxufSBmcm9tICcuL3V0aWxzJztcblxuLy8gWFhYIGZpbmQgYSBiZXR0ZXIgbmFtZSBmb3IgaXRcbmV4cG9ydCBjbGFzcyBIdHRwTGlua0hhbmRsZXIgZXh0ZW5kcyBBcG9sbG9MaW5rIHtcbiAgcHVibGljIHJlcXVlc3RlcjogKFxuICAgIG9wZXJhdGlvbjogT3BlcmF0aW9uLFxuICApID0+IExpbmtPYnNlcnZhYmxlPEZldGNoUmVzdWx0PiB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5yZXF1ZXN0ZXIgPSAob3BlcmF0aW9uOiBPcGVyYXRpb24pID0+XG4gICAgICBuZXcgTGlua09ic2VydmFibGUoKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dDogQ29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG5cbiAgICAgICAgLy8gZGVjaWRlcyB3aGljaCB2YWx1ZSB0byBwaWNrLCBDb250ZXh0LCBPcHRpb25zIG9yIHRvIGp1c3QgdXNlIHRoZSBkZWZhdWx0XG4gICAgICAgIGNvbnN0IHBpY2sgPSA8SyBleHRlbmRzIGtleW9mIENvbnRleHQgfCBrZXlvZiBPcHRpb25zPihcbiAgICAgICAgICBrZXk6IEssXG4gICAgICAgICAgaW5pdD86IENvbnRleHRbS10gfCBPcHRpb25zW0tdLFxuICAgICAgICApOiBDb250ZXh0W0tdIHwgT3B0aW9uc1tLXSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHByaW9yaXRpemUoY29udGV4dFtrZXldLCB0aGlzLm9wdGlvbnNba2V5XSwgaW5pdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaW5jbHVkZVF1ZXJ5ID0gcGljaygnaW5jbHVkZVF1ZXJ5JywgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVFeHRlbnNpb25zID0gcGljaygnaW5jbHVkZUV4dGVuc2lvbnMnLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHBpY2soJ21ldGhvZCcsICdQT1NUJyk7XG4gICAgICAgIGNvbnN0IHVybCA9IHBpY2soJ3VyaScsICdncmFwaHFsJyk7XG4gICAgICAgIGNvbnN0IHdpdGhDcmVkZW50aWFscyA9IHBpY2soJ3dpdGhDcmVkZW50aWFscycpO1xuICAgICAgICBjb25zdCB1c2VNdWx0aXBhcnQgPSBwaWNrKCd1c2VNdWx0aXBhcnQnKTtcblxuICAgICAgICBjb25zdCByZXE6IFJlcXVlc3QgPSB7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHVybDogdHlwZW9mIHVybCA9PT0gJ2Z1bmN0aW9uJyA/IHVybChvcGVyYXRpb24pIDogdXJsLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBvcGVyYXRpb24udmFyaWFibGVzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgdXNlTXVsdGlwYXJ0LFxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5vcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaW5jbHVkZUV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAocmVxLmJvZHkgYXMgQm9keSkuZXh0ZW5zaW9ucyA9IG9wZXJhdGlvbi5leHRlbnNpb25zO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluY2x1ZGVRdWVyeSkge1xuICAgICAgICAgIChyZXEuYm9keSBhcyBCb2R5KS5xdWVyeSA9IHByaW50KG9wZXJhdGlvbi5xdWVyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWFkZXJzID0gY3JlYXRlSGVhZGVyc1dpdGhDbGllbnRBd2VyZW5lc3MoY29udGV4dCk7XG5cbiAgICAgICAgcmVxLm9wdGlvbnMuaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXEub3B0aW9ucy5oZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgICAgICBjb25zdCBzdWIgPSBmZXRjaChyZXEsIHRoaXMuaHR0cENsaWVudCwgZXh0cmFjdEZpbGVzKS5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uLnNldENvbnRleHQoe3Jlc3BvbnNlfSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IChlcnIpID0+IG9ic2VydmVyLmVycm9yKGVyciksXG4gICAgICAgICAgY29tcGxldGU6ICgpID0+IG9ic2VydmVyLmNvbXBsZXRlKCksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzdWIuY2xvc2VkKSB7XG4gICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyByZXF1ZXN0KG9wOiBPcGVyYXRpb24pOiBMaW5rT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdD4gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0ZXIob3ApO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBIdHRwTGluayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBwdWJsaWMgY3JlYXRlKG9wdGlvbnM6IE9wdGlvbnMpOiBIdHRwTGlua0hhbmRsZXIge1xuICAgIHJldHVybiBuZXcgSHR0cExpbmtIYW5kbGVyKHRoaXMuaHR0cENsaWVudCwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==